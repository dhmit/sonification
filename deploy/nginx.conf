upstream project_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/home/ubuntu/run/gunicorn.sock fail_timeout=0;
}

server {
    listen 80;
    server_name sonification.dhmit.xyz;
    return 301 http://sonification.dhlab.mit.edu$request_uri;
}

server {
    listen 443 ssl;
    server_name sonification.dhmit.xyz;
    ssl_certificate 	    /etc/letsencrypt/live/sonification.dhmit.xyz/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/sonification.dhmit.xyz/privkey.pem;
    return 301 https://sonification.dhlab.mit.edu$request_uri;
}
 

server {
    if ($host = sonification.dhlab.mit.edu) {
         return 301 https://$host$request_uri;
    }

     listen                80;
     server_name           sonification.dhlab.mit.edu;
     return 404; # this should not happen
}

# main server config
server {
    listen                  443 ssl;
    server_name		    sonification.dhlab.mit.edu;
    ssl_certificate 	    /etc/letsencrypt/live/sonification.dhlab.mit.edu/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/sonification.dhlab.mit.edu/privkey.pem;
    include 		    /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam             /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    client_max_body_size 4G;

    access_log /home/ubuntu/run/logs/nginx-access.log;
    error_log /home/ubuntu/run/logs/nginx-error.log;

    location = /favicon.ico { access_log off; log_not_found off; }

    location /static/ {
        alias   /home/ubuntu/sonification/static/;
    }

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        proxy_pass http://project_server;
    }


    # Error pages
    # proxy_intercept_errors on;
    # error_page 403 /403.html;
    # error_page 404 /404.html;
    # error_page 500 502 504 /500.html;
    # error_page 503 /503.html;
    # location = /500.html { root /home/ubuntu/sonification/static/; }
    # location = /503.html { root /home/ubuntu/sonification/static/; }
    # location = /403.html { root /home/ubuntu/sonification/static/; }
    # location = /404.html { root /home/ubuntu/sonification/static/; }
}


##
# `gzip` Settings
#
#
gzip_vary on;
gzip_proxied any;
gzip_comp_level 6;
gzip_buffers 16 8k;
gzip_http_version 1.1;
gzip_min_length 256;
gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype font/eot image/svg+xml image/x-icon;

# after editing, copy me to the right place:
# > sudo cp nginx.conf /etc/nginx/sites-available/sonification

